/*
 * SET UP CONFIGURATION VARIABLES
 */

params {
    // Configurable variables
    name = false
    project = false
    plaintext_email = false
    version = '1.0.0-alpha'

    // Directories paths
    projectDir = '/home/phesketh/Documents/GitHub/QuasiFlow'
    outdir = 'out/'
    workDir = 'work/'
    scriptDir = "${projectDir}/bin"
    dbDir = "${projectDir}/db"

    // Conda environments
    conda_main_envs = "${projectDir}/envs/main_env.yml"
    conda_R_envs = "${projectDir}/envs/R_env.yml"

    // Params for HyDRA
    mutation_db = ''
    reporting_threshold = 1
    consensus_pct = 20
    min_read_qual = 30
    length_cutoff = 50
    score_cutoff = 30
    min_variant_qual = 30
    min_dp = 100
    min_ac = 5
    min_freq = 0.2
}

/*
 * PROFILES
 */

profiles {
    conda_on {
        conda.enabled = true
        conda.cacheDir = "${params.outdir}/envs/conda"
    }

}

process {
    withName: runTrimGalore {
        cpus = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
        time = 20.min
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
    
    withName: runfastQC {
        cpus = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
        time = 20.min
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
    
    withName: getReadStats {
        cpus = 1
        memory = 4.GB
        time = 5.min
    }
        
    withName: runMultiQC {
        cpus = 2
        memory = 6.GB
        time = 30.min
    }
    
    withName: runHydra {
        cpus = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
        time = 20.min
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
    
    withName: runSierralocal {
        cpus = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
        time = 20.min
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
    
    withName: renderReport {
        cpus = 1
        memory = 6.GB
        time = 10.min
    }
    
    withName: getVersions {
        cpus = 1
        memory = 4.GB
        time = 10.min
    }
}

// Produce nextflow reports
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/${params.runID}_timeline.html"
    overwrite = true
}

report {
    enabled = true
    file = "${params.outdir}/pipeline_info/${params.runID}_report.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/${params.runID}_trace.txt"
    overwrite = true
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/${params.runID}_dag.svg"
    overwrite = true
}

dag.direction = 'TB'